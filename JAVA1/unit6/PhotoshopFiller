package unit6;
// Photoshop program that can run several manipulations on 
// an image
// filler code by Mr. David

import java.awt.Color;
import java.awt.Component;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

import javax.imageio.ImageIO;
import javax.swing.JFileChooser;

public class PhotoshopFiller extends Component {

	// the name of the output file. will be determined by which methods are called
    private String outputName;
    
    // the 2d array of colors representing the image
    private Color[][] pixels;
    
    // the width and height of the image 
    private int w,h;
    

    // this method increases each color's rgb value by a given amount.
    // don't forget that rgb values are limited to the range [0,255]
    public void brighten(int amount) {
        outputName = "brightened_" + outputName;
        for(int i=0; i<pixels.length; i++) {
        	for(int j=0; j<pixels[i].length; j++) {
        		Color c = pixels[i][j];
    
        		int r = c.getRed() + amount;  //bright each rgb value by 'amount' 
        		int g = c.getGreen() + amount;
        		int b = c.getBlue() + amount;
        		
        		if(r>255) {  // check any exception
        			r = 255;
        		}
        		if(g>255) {
        			g = 255;
        		}
        		if(b>255) {
        			b = 255;
        		}
        		if(r<0) {
        			r = 0;
        		}
        		if(g<0) {
        			g = 0;
        		}
        		if(b<0) {
        			b = 0;
        		}
        		
        		pixels[i][j]=new Color(r,g,b); // set new color
        	}
        }
    }
    
    // flip an image either horizontally or vertically.
    public void flip(boolean horizontally) {
        outputName = (horizontally?"h":"v") + "_flipped_" + outputName;
        
        if(horizontally) {
        	for(int i=0; i<pixels.length; i++) {
        		for(int j=0; j<pixels[i].length/2; j++) {
        			Color c_r = pixels[i][j]; // value of right color
        			Color c_l = pixels[i][pixels[i].length-j-1]; // value of left color 
            		
        			pixels[i][j]=c_l;  //change color of right and left color
        			pixels[i][pixels[i].length-j-1]=c_r;
        		}
        	}
        }else{
        	for(int i=0; i<pixels.length/2; i++) {
        		for(int j=0; j<pixels[i].length; j++) {
        			Color c_u = pixels[i][j]; // value of upper color
        			Color c_d = pixels[pixels.length-1-i][j]; // value of down color
            		
        			pixels[i][j]=c_d; //change color of up color and down color
        			pixels[pixels.length-1-i][j]=c_u;
        		}
        	}
        }
    }
    
    // negates an image
    // to do this: subtract each pixel's rgb value from 255 
    // and use this as the new value
    public void negate() {
        outputName = "negated_" + outputName;
        
        for(int i=0; i<pixels.length; i++) {
        	for(int j=0; j<pixels[i].length; j++) {
        		Color c = pixels[i][j];
    
        		int r = 255 - c.getRed(); // subtract original color from 255 to get the opposite color
        		int g = 255 - c.getGreen();
        		int b = 255 - c.getBlue();
        		
        		pixels[i][j]=new Color(r,g,b); //set the new color
        	}
        }
    }
    
    // this makes the image 'simpler' by redrawing it using only a few colors
    // to do this: for each pixel, find the color in the list that is closest to
    // the pixel's rgb value. 
    // use this predefined color as the rgb value for the changed image.
    public void simplify() {
    
    		// the list of colors to compare to. Feel free to change/add colors
    		Color[] colorList = {Color.BLUE, Color.RED,Color.ORANGE, Color.MAGENTA,
                Color.BLACK, Color.WHITE, Color.GREEN, Color.YELLOW, Color.CYAN};
        outputName = "simplified_" + outputName;
        
        for(int i=0; i<pixels.length; i++) {
        	for(int j=0; j<pixels[i].length; j++) {
        		Color c = pixels[i][j];
        		int minIndex=0;
        		 // check each color and find the minimum distanced value from the original color
        		for(int a=1; a<colorList.length; a++) {
        			if(distance(c,colorList[a])<distance(c,colorList[minIndex])) {
        				minIndex = a;
        			}
        		}
        		pixels[i][j] = colorList[minIndex]; // change color to simpler color.
        		
        	}
        }
         
    }
    
    // optional helper method (recommended) that finds the 'distance' 
    // between two colors.
    // use the 3d distance formula to calculate
    public double distance(Color c1, Color c2) {
    	
    	int r1 = 255 - c1.getRed();
		int g1 = 255 - c1.getGreen();
		int b1 = 255 - c1.getBlue();
		
		int r2 = 255 - c2.getRed();
		int g2 = 255 - c2.getGreen();
		int b2 = 255 - c2.getBlue();
    	double distance = Math.sqrt(Math.pow((r1-r2), 2)+Math.pow((g1-g2), 2)+Math.pow((b1-b2), 2));
    	return distance;
    }
    
    // this blurs the image
    // to do this: at each pixel, sum the 8 surrounding pixels' rgb values 
    // with the current pixel's own rgb value. 
    // divide this sum by 9, and set it as the rgb value for the blurred image
    public void blur() {
		outputName = "blurred_" + outputName;
		Color[][] pixels_copy = new Color[h][w]; // set new array to make sure every pixels are blurred equally.
		for(int i=0; i<pixels.length; i++) {
        	for(int j=0; j<pixels[i].length; j++) {
        		if(i==0 || j==0 || i==h-1 || j == w-1) { // make border the original color
        			pixels_copy[i][j]=pixels[i][j];
        		}else {
        			Color c = pixels[i][j]; 
	        		int rsum = 0;
	        		int gsum = 0;
	        		int bsum = 0;
	        		for(int a = i-1; a<i+2; a++) { //add value of surrounding 3*3
	    				for(int b=j-1; b<j+2; b++) {
	    					rsum += pixels[a][b].getRed();
	    					gsum += pixels[a][b].getGreen();
	    					bsum += pixels[a][b].getBlue();
	    				}
	    			}
	              	pixels_copy[i][j]=new Color((rsum-c.getRed())/9,(gsum-c.getGreen())/9,(bsum-c.getBlue())/9); 
	              	//subtract the original rgb value so that it can only have color of surround
	        	}
        	}
		}
		pixels = pixels_copy;
	}
    
    // this highlights the edges in the image, turning everything else black. 
    // to do this: at each pixel, sum the 8 surrounding pixels' rgb values. 
    // now, multiply the current pixel's rgb value by 8, then subtract the sum.
    // this value is the rgb value for the 'edged' image
    public void edge() {
        outputName = "edged_" + outputName;
        Color[][] pixels_copy = new Color[pixels.length][pixels[0].length];
        
        for(int i=0; i<pixels.length; i++) {
        	for(int j=0; j<pixels[i].length; j++) {
        		int rsum = 0;
        		int gsum = 0;
        		int bsum = 0;
        		if(i==0 || j==0 || i==h-1 || j == w-1) { // make border black
        			pixels_copy[i][j]=Color.black;
        		}
        		else {
        			for(int a = i-1; a<i+2; a++) { //add value of surrounding 3*3
        				for(int b=j-1; b<j+2; b++) {
        					rsum += pixels[a][b].getRed();
        					gsum += pixels[a][b].getGreen();
        					bsum += pixels[a][b].getBlue();
        				}
        			}
        			Color c = pixels[i][j];
        			int r = c.getRed();
        			int g = c.getGreen();
        			int b = c.getBlue();
        		
        			int newr =r*9 - rsum ; //subtract the original value from the sum
        			int newg = g*9 - gsum ;
	              	int newb =b*9-  bsum ;
	              	
	              	if(newr>255) { //make sure that the value do not go over 255 or below 0. 
	        			newr = 255;
	        		}
	        		if(newg>255) {
	        			newg = 255;
	        		}
	        		if(newb>255) {
	        			newb = 255;
	        		}
	        		if(newr<0) {
	        			newr = 0;
	        		}
	        		if(newg<0) {
	        			newg = 0;
	        		}
	        		if(newb<0) {
	        			newb = 0;
	        		}
        		
	        		pixels_copy[i][j]=new Color(newr,newg,newb);
	        		
        		}
        		
        	}
        	
        }
        pixels = pixels_copy; //move copy to the original array to make a image with it
    }
    
    public void grayscale() {
        outputName = "grayscaled_" + outputName;
        for(int i=0; i<pixels.length; i++) {
        	for(int j=0; j<pixels[i].length; j++) {
        		Color c = pixels[i][j];
        		int avg = (c.getRed() + c.getGreen() +  c.getBlue())/3; // add all color and get average
        		pixels[i][j]=new Color(avg,avg,avg); // set new color to have same rgb value
        	}
        }
    }
    
    //following red, green, blue scaled functions are similar to the gray scaled but have double rgb values. 
    
    public void redscale() {
        outputName = "redscaled_" + outputName;
        for(int i=0; i<pixels.length; i++) {
        	for(int j=0; j<pixels[i].length; j++) {
        		Color c = pixels[i][j];
        		int avg = (c.getRed() + c.getGreen() +  c.getBlue())/3;
        		int newred = avg*2; 
        		if(newred>255) { // check exception
        			newred = 255;
        		}
        		pixels[i][j]=new Color(newred,avg,avg);
        		
        	}
        }
    }
    
    public void greenscale() {
        outputName = "greenscaled_" + outputName;
        for(int i=0; i<pixels.length; i++) {
        	for(int j=0; j<pixels[i].length; j++) {
        		Color c = pixels[i][j];
        		int avg = (c.getRed() + c.getGreen() +  c.getBlue())/3;
        		int newgreen = avg*2;
        		if(newgreen>255) { // check exception
        			newgreen = 255;
        		}
        		pixels[i][j]=new Color(avg,newgreen,avg);
        		
        	}
        }
    }
    public void bluescale() {
        outputName = "bluescaled_" + outputName;
        for(int i=0; i<pixels.length; i++) {
        	for(int j=0; j<pixels[i].length; j++) {
        		Color c = pixels[i][j];
        		int avg = (c.getRed() + c.getGreen() +  c.getBlue())/3;
        		int newblue = avg*2;
        		if(newblue>255) { // check exception
        			newblue = 255;
        		}
        		pixels[i][j]=new Color(avg,avg,newblue);
        		
        	}
        }
    }

    
    // *************** DON'T MESS WITH THE BELOW CODE **************** //
    
    // feel free to check it out, but don't change it unless you've consulted 
    // with Mr. David and understand what the code's doing
    
    

    public void run() {
    	JFileChooser fc = new JFileChooser();
		File workingDirectory = new File(System.getProperty("user.dir")+System.getProperty("file.separator")+ "Images");
        // fc.setCurrentDirectory(workingDirectory);
		fc.showOpenDialog(null);
		File my_file = fc.getSelectedFile();
		if (my_file == null)
			System.exit(-1);
		
		// reads the image file and creates our 2d array
        BufferedImage image;
		try {
			image = ImageIO.read(my_file);
		
	        BufferedImage new_image = new BufferedImage(image.getWidth(),
	                        image.getHeight(), BufferedImage.TYPE_INT_ARGB);
	        create_pixel_array(image);
			outputName = my_file.getName();
			
			// runs the manipulations determined by the user
			System.out.println("Enter the manipulations you would like to run on the image.\nYour "
					+ "choices are: brighten, flip, negate, blur, edge,\n grayscale, redscale, bluescale, greenscale or simplify.\nEnter each "
					+ "manipulation you'd like to run, then type in 'done'.");
			Scanner in = new Scanner(System.in);
			String action = in.next().toLowerCase();
			while (!action.equals("done")) {
	    			try {
		    			if (action.equals("brighten")) {
		    				System.out.println("enter an amount to increase the brightness by");
		    				int brightness = in.nextInt();
		        			Method m = getClass().getDeclaredMethod(action, int.class);
		        			m.invoke(this, brightness);
		    			}
		    			else if (action.equals("flip")) {
		    				System.out.println("enter \"h\" to flip horizontally, anything else to flip vertically.");
		        			Method m = getClass().getDeclaredMethod(action, boolean.class);
		        			m.invoke(this, in.next().equals("h"));
		    			}
		    			else {
		        			Method m = getClass().getDeclaredMethod(action);
		        			m.invoke(this, new Object[0]);
		    			}
		    			System.out.println("done. enter another action, or type 'done'");
	    			}
	    			catch (NoSuchMethodException e) {
	    				System.out.println("not a valid action, try again");
	    			} catch (IllegalAccessException e) {e.printStackTrace();System.exit(1);} 
	    			catch (IllegalArgumentException e) {e.printStackTrace();System.exit(1);}
	    			catch (InvocationTargetException e) {e.printStackTrace();System.exit(1);}
	    			
	    			action = in.next().toLowerCase();
	    		} 
	        in.close();
	        
	        // turns our 2d array of colors into a new png file
	        create_new_image(new_image);
	        File output_file = new File("Images/" + outputName);
	        ImageIO.write(new_image, "png", output_file);
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
    }
		
    
    public void create_pixel_array(BufferedImage image) {
        w = image.getWidth();
        h = image.getHeight();
        pixels = new Color[h][];
        for (int i = 0; i < h; i++) {
            pixels[i] = new Color[w];
            for (int j = 0; j < w; j++) {
                pixels[i][j] = new Color(image.getRGB(j,i));
            }
        }
    }

    public void create_new_image(BufferedImage new_image) {
        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {
            		new_image.setRGB(j, i, pixels[i][j].getRGB());
            }
        }
    }

    public static void main(String[] args) {
		new PhotoshopFiller();
	}

    public PhotoshopFiller() {
		run();
    }
}
